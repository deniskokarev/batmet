/dts-v1/;
#include <mem.h>
#include <st/f3/stm32f334.dtsi>
#include "stm32f334k(4-6-8)tx-pinctrl.dtsi"

/ {
	model = "Denis Kokarev Battery meter board";
	compatible = "st,stm32f3_batmet";

	zephyr,user {
		dac = <&dac1>;
		dac-channel-id = <1>;
		dac-resolution = <12>;
		io-channels = <&adc1 1 &adc1 2 &adc1 3>;
	};

	ccm0: memory@10000000 {
		compatible = "zephyr,memory-region", "st,stm32-ccm";
		reg = <0x10000000 DT_SIZE_K(4)>;
		zephyr,memory-region = "CCM";
	};

	sram0: memory@20000000 {
		reg = <0x20000000 DT_SIZE_K(12)>;
	};

	soc {
		flash-controller@40022000 {
			flash0: flash@8000000 {
				reg = <0x08000000 DT_SIZE_K(64)>;
			};
		};
	};

	chosen {
		zephyr,console = &usart1;
		zephyr,shell-uart = &usart1;
		zephyr,sram = &sram0;
		zephyr,flash = &flash0;
		zephyr,ccm = &ccm0;
	};

	leds {
		// wtf, something is wrong with gpios
		// in order to make active high have to set it low???
		compatible = "gpio-leds";
		red_led: led_1 {
			gpios = <&gpiob 5 GPIO_ACTIVE_LOW>;
			label = "LED Red";
		};
		green_led: led_2 {
			gpios = <&gpiob 4 GPIO_ACTIVE_LOW>;
			label = "LED Green";
		};
	};

	gpio_keys {
		compatible = "gpio-keys";
	};

	aliases {
		ledr = &red_led;
		ledg = &green_led;
		watchdog0 = &iwdg;
	};
};

&clk_lsi {
	status = "okay";
};

&clk_hsi {
	clock-frequency = <DT_FREQ_M(8)>;
	status = "okay";
};

&pll {
	prediv = <2>;
	mul = <9>;
	clocks = <&clk_hsi>;
	status = "okay";
};

&rcc {
	clocks = <&pll>;
	clock-frequency = <DT_FREQ_M(36)>;
	ahb-prescaler = <1>;
	apb1-prescaler = <1>; // may not be /2, otherwise uart is reduced twice
	apb2-prescaler = <1>;
};

&usart1 {
	pinctrl-0 = <&usart1_tx_pa9 &usart1_rx_pa10>;
	pinctrl-names = "default";
	current-speed = <115200>;
	hw-flow-control;
	parity = "none";
	status = "okay";
};

&i2c1 {
	pinctrl-0 = <&i2c1_scl_pb6 &i2c1_sda_pb7>;
	pinctrl-names = "default";
	status = "okay";
	clock-frequency = <I2C_BITRATE_FAST>;
};

&rtc {
	clocks = <&rcc STM32_CLOCK_BUS_APB1 0x10000000>,
		 <&rcc STM32_SRC_LSI RTC_SEL(2)>;
	status = "okay";
};

&flash0 {
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		// we're not using mcuboot, so boot partition doesn't matter, but
		// NB!!! If using NVS, the image size must not exceed 58k
		// If NVS is not used, the partition map doesn't matter, all 64k
		// may be used as code
		boot_partition: partition@0 {
			reg = <0x0 DT_SIZE_K(58)>;
			read-only;
		};

		// Set 2k * 3 sectors of storage at the end of the 64Kb of flash
		storage_partition: partition@e800 {
			label = "storage";
			reg = <0xe800 DT_SIZE_K(6)>;
		};
	};
};

&iwdg {
	status = "okay";
};

&timers1 {
	st,prescaler = <10000>;
	status = "okay";
	pwm1: pwm {
		status = "okay";
		pinctrl-0 = <&tim1_ch1_pa8>;
		pinctrl-names = "default";
	};
};

&adc1 {
	#address-cells = <1>;
	#size-cells = <0>;
	pinctrl-0 = <&adc1_in1_pa0 &adc1_in2_pa1 &adc1_in3_pa2>;
	pinctrl-names = "default";

	channel@1 {
		reg = <1>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
		zephyr,resolution = <12>;
	};
	channel@2 {
		reg = <2>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
		zephyr,resolution = <12>;
	};
	channel@3 {
		reg = <3>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
		zephyr,resolution = <12>;
	};
	status = "okay";
};

&die_temp {
	status = "okay";
};

&dac1 {
	status = "okay";
	/* dac output pins(pa4,pa5,pa6) might conflict with spi1 pins */
	pinctrl-0 = <&dac1_out1_pa4>;
	pinctrl-names = "default";
};

&dma1 {
	status = "okay";
};
